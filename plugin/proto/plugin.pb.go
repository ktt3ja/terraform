// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	plugin.proto

It has these top-level messages:
	Empty
	InstanceInfo
	InstanceState
	EphemeralState
	ResourceAttrDiff
	InstanceDiff
	ApplyRequest
	ApplyResponse
	ResourceConfig
	ConfigureRequest
	DataSourcesResponse
	DiffRequest
	DiffResponse
	GetSchemaRequest
	GetSchemaResponse
	ImportStateRequest
	ImportStateResponse
	InputRequest
	InputResponse
	ReadDataApplyRequest
	ReadDataApplyResponse
	ReadDataDiffRequest
	ReadDataDiffResponse
	RefreshRequest
	RefreshResponse
	ResourceType
	ResourcesResponse
	ValidateRequest
	ValidateResponse
	ValidateDataSourceRequest
	ValidateResourceRequest
	ProvisionerApplyRequest
	UIOutput
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type DiffAttrType int32

const (
	DiffAttrType_UNKNOWN DiffAttrType = 0
	DiffAttrType_INPUT   DiffAttrType = 1
	DiffAttrType_OUTPUT  DiffAttrType = 2
)

var DiffAttrType_name = map[int32]string{
	0: "UNKNOWN",
	1: "INPUT",
	2: "OUTPUT",
}
var DiffAttrType_value = map[string]int32{
	"UNKNOWN": 0,
	"INPUT":   1,
	"OUTPUT":  2,
}

func (x DiffAttrType) String() string {
	return proto1.EnumName(DiffAttrType_name, int32(x))
}
func (DiffAttrType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InstanceInfo struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type       string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	ModulePath []string `protobuf:"bytes,3,rep,name=module_path,json=modulePath" json:"module_path,omitempty"`
}

func (m *InstanceInfo) Reset()                    { *m = InstanceInfo{} }
func (m *InstanceInfo) String() string            { return proto1.CompactTextString(m) }
func (*InstanceInfo) ProtoMessage()               {}
func (*InstanceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InstanceInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InstanceInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InstanceInfo) GetModulePath() []string {
	if m != nil {
		return m.ModulePath
	}
	return nil
}

type InstanceState struct {
	Id         string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Attributes map[string][]byte `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ephemeral  *EphemeralState   `protobuf:"bytes,3,opt,name=ephemeral" json:"ephemeral,omitempty"`
	// using json for now
	Meta    []byte `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
	Tainted bool   `protobuf:"varint,5,opt,name=tainted" json:"tainted,omitempty"`
}

func (m *InstanceState) Reset()                    { *m = InstanceState{} }
func (m *InstanceState) String() string            { return proto1.CompactTextString(m) }
func (*InstanceState) ProtoMessage()               {}
func (*InstanceState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InstanceState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InstanceState) GetAttributes() map[string][]byte {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *InstanceState) GetEphemeral() *EphemeralState {
	if m != nil {
		return m.Ephemeral
	}
	return nil
}

func (m *InstanceState) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InstanceState) GetTainted() bool {
	if m != nil {
		return m.Tainted
	}
	return false
}

type EphemeralState struct {
	Type     string            `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	ConnInfo map[string]string `protobuf:"bytes,2,rep,name=conn_info,json=connInfo" json:"conn_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EphemeralState) Reset()                    { *m = EphemeralState{} }
func (m *EphemeralState) String() string            { return proto1.CompactTextString(m) }
func (*EphemeralState) ProtoMessage()               {}
func (*EphemeralState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EphemeralState) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EphemeralState) GetConnInfo() map[string]string {
	if m != nil {
		return m.ConnInfo
	}
	return nil
}

type ResourceAttrDiff struct {
	Old         string       `protobuf:"bytes,1,opt,name=old" json:"old,omitempty"`
	New         string       `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
	NewComputed bool         `protobuf:"varint,3,opt,name=new_computed,json=newComputed" json:"new_computed,omitempty"`
	NewRemoved  bool         `protobuf:"varint,4,opt,name=new_removed,json=newRemoved" json:"new_removed,omitempty"`
	NewExtra    []byte       `protobuf:"bytes,5,opt,name=new_extra,json=newExtra,proto3" json:"new_extra,omitempty"`
	RequiresNew bool         `protobuf:"varint,6,opt,name=requires_new,json=requiresNew" json:"requires_new,omitempty"`
	Sensitive   bool         `protobuf:"varint,7,opt,name=sensitive" json:"sensitive,omitempty"`
	Type        DiffAttrType `protobuf:"varint,8,opt,name=type,enum=proto.DiffAttrType" json:"type,omitempty"`
}

func (m *ResourceAttrDiff) Reset()                    { *m = ResourceAttrDiff{} }
func (m *ResourceAttrDiff) String() string            { return proto1.CompactTextString(m) }
func (*ResourceAttrDiff) ProtoMessage()               {}
func (*ResourceAttrDiff) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResourceAttrDiff) GetOld() string {
	if m != nil {
		return m.Old
	}
	return ""
}

func (m *ResourceAttrDiff) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

func (m *ResourceAttrDiff) GetNewComputed() bool {
	if m != nil {
		return m.NewComputed
	}
	return false
}

func (m *ResourceAttrDiff) GetNewRemoved() bool {
	if m != nil {
		return m.NewRemoved
	}
	return false
}

func (m *ResourceAttrDiff) GetNewExtra() []byte {
	if m != nil {
		return m.NewExtra
	}
	return nil
}

func (m *ResourceAttrDiff) GetRequiresNew() bool {
	if m != nil {
		return m.RequiresNew
	}
	return false
}

func (m *ResourceAttrDiff) GetSensitive() bool {
	if m != nil {
		return m.Sensitive
	}
	return false
}

func (m *ResourceAttrDiff) GetType() DiffAttrType {
	if m != nil {
		return m.Type
	}
	return DiffAttrType_UNKNOWN
}

type InstanceDiff struct {
	Attributes     map[string]*ResourceAttrDiff `protobuf:"bytes,1,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Destroy        bool                         `protobuf:"varint,2,opt,name=destroy" json:"destroy,omitempty"`
	DestroyDeposed bool                         `protobuf:"varint,3,opt,name=destroy_deposed,json=destroyDeposed" json:"destroy_deposed,omitempty"`
	DestroyTainted bool                         `protobuf:"varint,4,opt,name=destroy_tainted,json=destroyTainted" json:"destroy_tainted,omitempty"`
	// all meta is json for now
	Meta []byte `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *InstanceDiff) Reset()                    { *m = InstanceDiff{} }
func (m *InstanceDiff) String() string            { return proto1.CompactTextString(m) }
func (*InstanceDiff) ProtoMessage()               {}
func (*InstanceDiff) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InstanceDiff) GetAttributes() map[string]*ResourceAttrDiff {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *InstanceDiff) GetDestroy() bool {
	if m != nil {
		return m.Destroy
	}
	return false
}

func (m *InstanceDiff) GetDestroyDeposed() bool {
	if m != nil {
		return m.DestroyDeposed
	}
	return false
}

func (m *InstanceDiff) GetDestroyTainted() bool {
	if m != nil {
		return m.DestroyTainted
	}
	return false
}

func (m *InstanceDiff) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

type ApplyRequest struct {
	Info  *InstanceInfo  `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	State *InstanceState `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Diff  *InstanceDiff  `protobuf:"bytes,3,opt,name=diff" json:"diff,omitempty"`
}

func (m *ApplyRequest) Reset()                    { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string            { return proto1.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()               {}
func (*ApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ApplyRequest) GetInfo() *InstanceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ApplyRequest) GetState() *InstanceState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ApplyRequest) GetDiff() *InstanceDiff {
	if m != nil {
		return m.Diff
	}
	return nil
}

type ApplyResponse struct {
	State *InstanceState `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *ApplyResponse) Reset()                    { *m = ApplyResponse{} }
func (m *ApplyResponse) String() string            { return proto1.CompactTextString(m) }
func (*ApplyResponse) ProtoMessage()               {}
func (*ApplyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ApplyResponse) GetState() *InstanceState {
	if m != nil {
		return m.State
	}
	return nil
}

type ResourceConfig struct {
	ComputedKeys []string          `protobuf:"bytes,1,rep,name=computed_keys,json=computedKeys" json:"computed_keys,omitempty"`
	Raw          map[string][]byte `protobuf:"bytes,2,rep,name=raw" json:"raw,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config       map[string][]byte `protobuf:"bytes,3,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ResourceConfig) Reset()                    { *m = ResourceConfig{} }
func (m *ResourceConfig) String() string            { return proto1.CompactTextString(m) }
func (*ResourceConfig) ProtoMessage()               {}
func (*ResourceConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ResourceConfig) GetComputedKeys() []string {
	if m != nil {
		return m.ComputedKeys
	}
	return nil
}

func (m *ResourceConfig) GetRaw() map[string][]byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *ResourceConfig) GetConfig() map[string][]byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type ConfigureRequest struct {
	ResourceConfig *ResourceConfig `protobuf:"bytes,1,opt,name=resource_config,json=resourceConfig" json:"resource_config,omitempty"`
}

func (m *ConfigureRequest) Reset()                    { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string            { return proto1.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()               {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ConfigureRequest) GetResourceConfig() *ResourceConfig {
	if m != nil {
		return m.ResourceConfig
	}
	return nil
}

type DataSourcesResponse struct {
	DataSources []string `protobuf:"bytes,1,rep,name=data_sources,json=dataSources" json:"data_sources,omitempty"`
}

func (m *DataSourcesResponse) Reset()                    { *m = DataSourcesResponse{} }
func (m *DataSourcesResponse) String() string            { return proto1.CompactTextString(m) }
func (*DataSourcesResponse) ProtoMessage()               {}
func (*DataSourcesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DataSourcesResponse) GetDataSources() []string {
	if m != nil {
		return m.DataSources
	}
	return nil
}

type DiffRequest struct {
	Info   *InstanceInfo   `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	State  *InstanceState  `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Config *ResourceConfig `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *DiffRequest) Reset()                    { *m = DiffRequest{} }
func (m *DiffRequest) String() string            { return proto1.CompactTextString(m) }
func (*DiffRequest) ProtoMessage()               {}
func (*DiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DiffRequest) GetInfo() *InstanceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *DiffRequest) GetState() *InstanceState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *DiffRequest) GetConfig() *ResourceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type DiffResponse struct {
	Diff *InstanceDiff `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
}

func (m *DiffResponse) Reset()                    { *m = DiffResponse{} }
func (m *DiffResponse) String() string            { return proto1.CompactTextString(m) }
func (*DiffResponse) ProtoMessage()               {}
func (*DiffResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DiffResponse) GetDiff() *InstanceDiff {
	if m != nil {
		return m.Diff
	}
	return nil
}

type GetSchemaRequest struct {
	ResourceTypes []string `protobuf:"bytes,1,rep,name=resource_types,json=resourceTypes" json:"resource_types,omitempty"`
	DataSources   []string `protobuf:"bytes,2,rep,name=data_sources,json=dataSources" json:"data_sources,omitempty"`
}

func (m *GetSchemaRequest) Reset()                    { *m = GetSchemaRequest{} }
func (m *GetSchemaRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetSchemaRequest) ProtoMessage()               {}
func (*GetSchemaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetSchemaRequest) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *GetSchemaRequest) GetDataSources() []string {
	if m != nil {
		return m.DataSources
	}
	return nil
}

type GetSchemaResponse struct {
	Schema []byte `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *GetSchemaResponse) Reset()                    { *m = GetSchemaResponse{} }
func (m *GetSchemaResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetSchemaResponse) ProtoMessage()               {}
func (*GetSchemaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetSchemaResponse) GetSchema() []byte {
	if m != nil {
		return m.Schema
	}
	return nil
}

type ImportStateRequest struct {
	Id   string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Info *InstanceInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *ImportStateRequest) Reset()                    { *m = ImportStateRequest{} }
func (m *ImportStateRequest) String() string            { return proto1.CompactTextString(m) }
func (*ImportStateRequest) ProtoMessage()               {}
func (*ImportStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ImportStateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImportStateRequest) GetInfo() *InstanceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ImportStateResponse struct {
	State []*InstanceState `protobuf:"bytes,1,rep,name=state" json:"state,omitempty"`
}

func (m *ImportStateResponse) Reset()                    { *m = ImportStateResponse{} }
func (m *ImportStateResponse) String() string            { return proto1.CompactTextString(m) }
func (*ImportStateResponse) ProtoMessage()               {}
func (*ImportStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ImportStateResponse) GetState() []*InstanceState {
	if m != nil {
		return m.State
	}
	return nil
}

type InputRequest struct {
	Id             string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ResourceConfig *ResourceConfig `protobuf:"bytes,2,opt,name=resource_config,json=resourceConfig" json:"resource_config,omitempty"`
	Reply          string          `protobuf:"bytes,3,opt,name=reply" json:"reply,omitempty"`
}

func (m *InputRequest) Reset()                    { *m = InputRequest{} }
func (m *InputRequest) String() string            { return proto1.CompactTextString(m) }
func (*InputRequest) ProtoMessage()               {}
func (*InputRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *InputRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InputRequest) GetResourceConfig() *ResourceConfig {
	if m != nil {
		return m.ResourceConfig
	}
	return nil
}

func (m *InputRequest) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

type InputResponse struct {
	Id             string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Query          string          `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	Description    string          `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Default        string          `protobuf:"bytes,4,opt,name=default" json:"default,omitempty"`
	ResourceConfig *ResourceConfig `protobuf:"bytes,5,opt,name=resource_config,json=resourceConfig" json:"resource_config,omitempty"`
}

func (m *InputResponse) Reset()                    { *m = InputResponse{} }
func (m *InputResponse) String() string            { return proto1.CompactTextString(m) }
func (*InputResponse) ProtoMessage()               {}
func (*InputResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *InputResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InputResponse) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *InputResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InputResponse) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *InputResponse) GetResourceConfig() *ResourceConfig {
	if m != nil {
		return m.ResourceConfig
	}
	return nil
}

type ReadDataApplyRequest struct {
	Info *InstanceInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Diff *InstanceDiff `protobuf:"bytes,2,opt,name=diff" json:"diff,omitempty"`
}

func (m *ReadDataApplyRequest) Reset()                    { *m = ReadDataApplyRequest{} }
func (m *ReadDataApplyRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadDataApplyRequest) ProtoMessage()               {}
func (*ReadDataApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReadDataApplyRequest) GetInfo() *InstanceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ReadDataApplyRequest) GetDiff() *InstanceDiff {
	if m != nil {
		return m.Diff
	}
	return nil
}

type ReadDataApplyResponse struct {
	State *InstanceState `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *ReadDataApplyResponse) Reset()                    { *m = ReadDataApplyResponse{} }
func (m *ReadDataApplyResponse) String() string            { return proto1.CompactTextString(m) }
func (*ReadDataApplyResponse) ProtoMessage()               {}
func (*ReadDataApplyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ReadDataApplyResponse) GetState() *InstanceState {
	if m != nil {
		return m.State
	}
	return nil
}

type ReadDataDiffRequest struct {
	Info   *InstanceInfo   `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Config *ResourceConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *ReadDataDiffRequest) Reset()                    { *m = ReadDataDiffRequest{} }
func (m *ReadDataDiffRequest) String() string            { return proto1.CompactTextString(m) }
func (*ReadDataDiffRequest) ProtoMessage()               {}
func (*ReadDataDiffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ReadDataDiffRequest) GetInfo() *InstanceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ReadDataDiffRequest) GetConfig() *ResourceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ReadDataDiffResponse struct {
	Diff *InstanceDiff `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
}

func (m *ReadDataDiffResponse) Reset()                    { *m = ReadDataDiffResponse{} }
func (m *ReadDataDiffResponse) String() string            { return proto1.CompactTextString(m) }
func (*ReadDataDiffResponse) ProtoMessage()               {}
func (*ReadDataDiffResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ReadDataDiffResponse) GetDiff() *InstanceDiff {
	if m != nil {
		return m.Diff
	}
	return nil
}

type RefreshRequest struct {
	Info  *InstanceInfo  `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	State *InstanceState `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *RefreshRequest) Reset()                    { *m = RefreshRequest{} }
func (m *RefreshRequest) String() string            { return proto1.CompactTextString(m) }
func (*RefreshRequest) ProtoMessage()               {}
func (*RefreshRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RefreshRequest) GetInfo() *InstanceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *RefreshRequest) GetState() *InstanceState {
	if m != nil {
		return m.State
	}
	return nil
}

type RefreshResponse struct {
	State *InstanceState `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *RefreshResponse) Reset()                    { *m = RefreshResponse{} }
func (m *RefreshResponse) String() string            { return proto1.CompactTextString(m) }
func (*RefreshResponse) ProtoMessage()               {}
func (*RefreshResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RefreshResponse) GetState() *InstanceState {
	if m != nil {
		return m.State
	}
	return nil
}

type ResourceType struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Importable bool   `protobuf:"varint,2,opt,name=importable" json:"importable,omitempty"`
}

func (m *ResourceType) Reset()                    { *m = ResourceType{} }
func (m *ResourceType) String() string            { return proto1.CompactTextString(m) }
func (*ResourceType) ProtoMessage()               {}
func (*ResourceType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ResourceType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourceType) GetImportable() bool {
	if m != nil {
		return m.Importable
	}
	return false
}

type ResourcesResponse struct {
	Resources []*ResourceType `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
}

func (m *ResourcesResponse) Reset()                    { *m = ResourcesResponse{} }
func (m *ResourcesResponse) String() string            { return proto1.CompactTextString(m) }
func (*ResourcesResponse) ProtoMessage()               {}
func (*ResourcesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ResourcesResponse) GetResources() []*ResourceType {
	if m != nil {
		return m.Resources
	}
	return nil
}

type ValidateRequest struct {
	Config *ResourceConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *ValidateRequest) Reset()                    { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string            { return proto1.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()               {}
func (*ValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ValidateRequest) GetConfig() *ResourceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ValidateResponse struct {
	Warnings []string `protobuf:"bytes,1,rep,name=warnings" json:"warnings,omitempty"`
	Errors   []string `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (m *ValidateResponse) Reset()                    { *m = ValidateResponse{} }
func (m *ValidateResponse) String() string            { return proto1.CompactTextString(m) }
func (*ValidateResponse) ProtoMessage()               {}
func (*ValidateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ValidateResponse) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *ValidateResponse) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

type ValidateDataSourceRequest struct {
	Type   string          `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Config *ResourceConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *ValidateDataSourceRequest) Reset()                    { *m = ValidateDataSourceRequest{} }
func (m *ValidateDataSourceRequest) String() string            { return proto1.CompactTextString(m) }
func (*ValidateDataSourceRequest) ProtoMessage()               {}
func (*ValidateDataSourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ValidateDataSourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ValidateDataSourceRequest) GetConfig() *ResourceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ValidateResourceRequest struct {
	Type   string          `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Config *ResourceConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *ValidateResourceRequest) Reset()                    { *m = ValidateResourceRequest{} }
func (m *ValidateResourceRequest) String() string            { return proto1.CompactTextString(m) }
func (*ValidateResourceRequest) ProtoMessage()               {}
func (*ValidateResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ValidateResourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ValidateResourceRequest) GetConfig() *ResourceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ProvisionerApplyRequest struct {
	// need to add Output
	State  *InstanceState  `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	Config *ResourceConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *ProvisionerApplyRequest) Reset()                    { *m = ProvisionerApplyRequest{} }
func (m *ProvisionerApplyRequest) String() string            { return proto1.CompactTextString(m) }
func (*ProvisionerApplyRequest) ProtoMessage()               {}
func (*ProvisionerApplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ProvisionerApplyRequest) GetState() *InstanceState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ProvisionerApplyRequest) GetConfig() *ResourceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type UIOutput struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *UIOutput) Reset()                    { *m = UIOutput{} }
func (m *UIOutput) String() string            { return proto1.CompactTextString(m) }
func (*UIOutput) ProtoMessage()               {}
func (*UIOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *UIOutput) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*InstanceInfo)(nil), "proto.InstanceInfo")
	proto1.RegisterType((*InstanceState)(nil), "proto.InstanceState")
	proto1.RegisterType((*EphemeralState)(nil), "proto.EphemeralState")
	proto1.RegisterType((*ResourceAttrDiff)(nil), "proto.ResourceAttrDiff")
	proto1.RegisterType((*InstanceDiff)(nil), "proto.InstanceDiff")
	proto1.RegisterType((*ApplyRequest)(nil), "proto.ApplyRequest")
	proto1.RegisterType((*ApplyResponse)(nil), "proto.ApplyResponse")
	proto1.RegisterType((*ResourceConfig)(nil), "proto.ResourceConfig")
	proto1.RegisterType((*ConfigureRequest)(nil), "proto.ConfigureRequest")
	proto1.RegisterType((*DataSourcesResponse)(nil), "proto.DataSourcesResponse")
	proto1.RegisterType((*DiffRequest)(nil), "proto.DiffRequest")
	proto1.RegisterType((*DiffResponse)(nil), "proto.DiffResponse")
	proto1.RegisterType((*GetSchemaRequest)(nil), "proto.GetSchemaRequest")
	proto1.RegisterType((*GetSchemaResponse)(nil), "proto.GetSchemaResponse")
	proto1.RegisterType((*ImportStateRequest)(nil), "proto.ImportStateRequest")
	proto1.RegisterType((*ImportStateResponse)(nil), "proto.ImportStateResponse")
	proto1.RegisterType((*InputRequest)(nil), "proto.InputRequest")
	proto1.RegisterType((*InputResponse)(nil), "proto.InputResponse")
	proto1.RegisterType((*ReadDataApplyRequest)(nil), "proto.ReadDataApplyRequest")
	proto1.RegisterType((*ReadDataApplyResponse)(nil), "proto.ReadDataApplyResponse")
	proto1.RegisterType((*ReadDataDiffRequest)(nil), "proto.ReadDataDiffRequest")
	proto1.RegisterType((*ReadDataDiffResponse)(nil), "proto.ReadDataDiffResponse")
	proto1.RegisterType((*RefreshRequest)(nil), "proto.RefreshRequest")
	proto1.RegisterType((*RefreshResponse)(nil), "proto.RefreshResponse")
	proto1.RegisterType((*ResourceType)(nil), "proto.ResourceType")
	proto1.RegisterType((*ResourcesResponse)(nil), "proto.ResourcesResponse")
	proto1.RegisterType((*ValidateRequest)(nil), "proto.ValidateRequest")
	proto1.RegisterType((*ValidateResponse)(nil), "proto.ValidateResponse")
	proto1.RegisterType((*ValidateDataSourceRequest)(nil), "proto.ValidateDataSourceRequest")
	proto1.RegisterType((*ValidateResourceRequest)(nil), "proto.ValidateResourceRequest")
	proto1.RegisterType((*ProvisionerApplyRequest)(nil), "proto.ProvisionerApplyRequest")
	proto1.RegisterType((*UIOutput)(nil), "proto.UIOutput")
	proto1.RegisterEnum("proto.DiffAttrType", DiffAttrType_name, DiffAttrType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Provider service

type ProviderClient interface {
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*Empty, error)
	DataSources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DataSourcesResponse, error)
	Diff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error)
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	ImportState(ctx context.Context, in *ImportStateRequest, opts ...grpc.CallOption) (*ImportStateResponse, error)
	Input(ctx context.Context, opts ...grpc.CallOption) (Provider_InputClient, error)
	ReadDataApply(ctx context.Context, in *ReadDataApplyRequest, opts ...grpc.CallOption) (*ReadDataApplyResponse, error)
	ReadDataDiff(ctx context.Context, in *ReadDataDiffRequest, opts ...grpc.CallOption) (*ReadDataDiffResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	Resources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResourcesResponse, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	ValidateDataSource(ctx context.Context, in *ValidateDataSourceRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	ValidateResource(ctx context.Context, in *ValidateResourceRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type providerClient struct {
	cc *grpc.ClientConn
}

func NewProviderClient(cc *grpc.ClientConn) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	out := new(ApplyResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/Apply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.Provider/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) DataSources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DataSourcesResponse, error) {
	out := new(DataSourcesResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/DataSources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Diff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error) {
	out := new(DiffResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/Diff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/GetSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ImportState(ctx context.Context, in *ImportStateRequest, opts ...grpc.CallOption) (*ImportStateResponse, error) {
	out := new(ImportStateResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/ImportState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Input(ctx context.Context, opts ...grpc.CallOption) (Provider_InputClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Provider_serviceDesc.Streams[0], c.cc, "/proto.Provider/Input", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerInputClient{stream}
	return x, nil
}

type Provider_InputClient interface {
	Send(*InputRequest) error
	Recv() (*InputResponse, error)
	grpc.ClientStream
}

type providerInputClient struct {
	grpc.ClientStream
}

func (x *providerInputClient) Send(m *InputRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *providerInputClient) Recv() (*InputResponse, error) {
	m := new(InputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) ReadDataApply(ctx context.Context, in *ReadDataApplyRequest, opts ...grpc.CallOption) (*ReadDataApplyResponse, error) {
	out := new(ReadDataApplyResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/ReadDataApply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ReadDataDiff(ctx context.Context, in *ReadDataDiffRequest, opts ...grpc.CallOption) (*ReadDataDiffResponse, error) {
	out := new(ReadDataDiffResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/ReadDataDiff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/Refresh", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Resources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResourcesResponse, error) {
	out := new(ResourcesResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/Resources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.Provider/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ValidateDataSource(ctx context.Context, in *ValidateDataSourceRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/ValidateDataSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ValidateResource(ctx context.Context, in *ValidateResourceRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := grpc.Invoke(ctx, "/proto.Provider/ValidateResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Provider service

type ProviderServer interface {
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
	Configure(context.Context, *ConfigureRequest) (*Empty, error)
	DataSources(context.Context, *Empty) (*DataSourcesResponse, error)
	Diff(context.Context, *DiffRequest) (*DiffResponse, error)
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	ImportState(context.Context, *ImportStateRequest) (*ImportStateResponse, error)
	Input(Provider_InputServer) error
	ReadDataApply(context.Context, *ReadDataApplyRequest) (*ReadDataApplyResponse, error)
	ReadDataDiff(context.Context, *ReadDataDiffRequest) (*ReadDataDiffResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	Resources(context.Context, *Empty) (*ResourcesResponse, error)
	Stop(context.Context, *Empty) (*Empty, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	ValidateDataSource(context.Context, *ValidateDataSourceRequest) (*ValidateResponse, error)
	ValidateResource(context.Context, *ValidateResourceRequest) (*ValidateResponse, error)
}

func RegisterProviderServer(s *grpc.Server, srv ProviderServer) {
	s.RegisterService(&_Provider_serviceDesc, srv)
}

func _Provider_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_DataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/DataSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DataSources(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Diff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Diff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/Diff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Diff(ctx, req.(*DiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ImportState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ImportState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/ImportState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ImportState(ctx, req.(*ImportStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Input_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProviderServer).Input(&providerInputServer{stream})
}

type Provider_InputServer interface {
	Send(*InputResponse) error
	Recv() (*InputRequest, error)
	grpc.ServerStream
}

type providerInputServer struct {
	grpc.ServerStream
}

func (x *providerInputServer) Send(m *InputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *providerInputServer) Recv() (*InputRequest, error) {
	m := new(InputRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Provider_ReadDataApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDataApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ReadDataApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/ReadDataApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ReadDataApply(ctx, req.(*ReadDataApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ReadDataDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDataDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ReadDataDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/ReadDataDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ReadDataDiff(ctx, req.(*ReadDataDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Resources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Resources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/Resources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Resources(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ValidateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ValidateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/ValidateDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ValidateDataSource(ctx, req.(*ValidateDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ValidateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ValidateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/ValidateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ValidateResource(ctx, req.(*ValidateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Provider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _Provider_Apply_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Provider_Configure_Handler,
		},
		{
			MethodName: "DataSources",
			Handler:    _Provider_DataSources_Handler,
		},
		{
			MethodName: "Diff",
			Handler:    _Provider_Diff_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _Provider_GetSchema_Handler,
		},
		{
			MethodName: "ImportState",
			Handler:    _Provider_ImportState_Handler,
		},
		{
			MethodName: "ReadDataApply",
			Handler:    _Provider_ReadDataApply_Handler,
		},
		{
			MethodName: "ReadDataDiff",
			Handler:    _Provider_ReadDataDiff_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Provider_Refresh_Handler,
		},
		{
			MethodName: "Resources",
			Handler:    _Provider_Resources_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Provider_Stop_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Provider_Validate_Handler,
		},
		{
			MethodName: "ValidateDataSource",
			Handler:    _Provider_ValidateDataSource_Handler,
		},
		{
			MethodName: "ValidateResource",
			Handler:    _Provider_ValidateResource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Input",
			Handler:       _Provider_Input_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

// Client API for Provisioner service

type ProvisionerClient interface {
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	Apply(ctx context.Context, in *ProvisionerApplyRequest, opts ...grpc.CallOption) (Provisioner_ApplyClient, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type provisionerClient struct {
	cc *grpc.ClientConn
}

func NewProvisionerClient(cc *grpc.ClientConn) ProvisionerClient {
	return &provisionerClient{cc}
}

func (c *provisionerClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := grpc.Invoke(ctx, "/proto.Provisioner/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) Apply(ctx context.Context, in *ProvisionerApplyRequest, opts ...grpc.CallOption) (Provisioner_ApplyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Provisioner_serviceDesc.Streams[0], c.cc, "/proto.Provisioner/Apply", opts...)
	if err != nil {
		return nil, err
	}
	x := &provisionerApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provisioner_ApplyClient interface {
	Recv() (*UIOutput, error)
	grpc.ClientStream
}

type provisionerApplyClient struct {
	grpc.ClientStream
}

func (x *provisionerApplyClient) Recv() (*UIOutput, error) {
	m := new(UIOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *provisionerClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.Provisioner/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Provisioner service

type ProvisionerServer interface {
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	Apply(*ProvisionerApplyRequest, Provisioner_ApplyServer) error
	Stop(context.Context, *Empty) (*Empty, error)
}

func RegisterProvisionerServer(s *grpc.Server, srv ProvisionerServer) {
	s.RegisterService(&_Provisioner_serviceDesc, srv)
}

func _Provisioner_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provisioner/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProvisionerApplyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProvisionerServer).Apply(m, &provisionerApplyServer{stream})
}

type Provisioner_ApplyServer interface {
	Send(*UIOutput) error
	grpc.ServerStream
}

type provisionerApplyServer struct {
	grpc.ServerStream
}

func (x *provisionerApplyServer) Send(m *UIOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _Provisioner_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provisioner/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Provisioner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Provisioner",
	HandlerType: (*ProvisionerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _Provisioner_Validate_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Provisioner_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Apply",
			Handler:       _Provisioner_Apply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

func init() { proto1.RegisterFile("plugin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x73, 0xd3, 0xc6,
	0x17, 0xff, 0x4a, 0x8e, 0x63, 0xeb, 0x49, 0x49, 0xcc, 0x3a, 0x10, 0x23, 0x18, 0xbe, 0x46, 0xd0,
	0xc1, 0x43, 0x87, 0x94, 0x9a, 0x19, 0x7e, 0x0e, 0x14, 0x9a, 0x04, 0x26, 0x65, 0x48, 0x18, 0x25,
	0xa1, 0x17, 0xa6, 0x1e, 0x61, 0xad, 0x13, 0x0d, 0xb6, 0x24, 0x56, 0xab, 0xb8, 0x3e, 0xf6, 0xd4,
	0x4b, 0x2f, 0x3d, 0xf4, 0xd8, 0x53, 0x6f, 0xed, 0xa9, 0xff, 0x61, 0x67, 0x57, 0xbb, 0xfa, 0x65,
	0x43, 0xe2, 0xb4, 0x9c, 0xbc, 0xfb, 0xf4, 0xf6, 0xed, 0xfb, 0xf1, 0x79, 0x9f, 0xb7, 0x06, 0x23,
	0x1c, 0xc6, 0x87, 0x9e, 0xbf, 0x1e, 0x92, 0x80, 0x06, 0xa8, 0xca, 0x7f, 0xac, 0x1a, 0x54, 0xb7,
	0x46, 0x21, 0x9d, 0x58, 0x7b, 0x60, 0x6c, 0xfb, 0x11, 0x75, 0xfc, 0x3e, 0xde, 0xf6, 0x07, 0x01,
	0x5a, 0x06, 0xd5, 0x73, 0x5b, 0x4a, 0x5b, 0xe9, 0x68, 0xb6, 0xea, 0xb9, 0x08, 0xc1, 0x02, 0x9d,
	0x84, 0xb8, 0xa5, 0x72, 0x09, 0x5f, 0xa3, 0xff, 0x83, 0x3e, 0x0a, 0xdc, 0x78, 0x88, 0x7b, 0xa1,
	0x43, 0x8f, 0x5a, 0x95, 0x76, 0xa5, 0xa3, 0xd9, 0x90, 0x88, 0x5e, 0x3b, 0xf4, 0xc8, 0xfa, 0x59,
	0x85, 0x25, 0x69, 0x75, 0x8f, 0x3a, 0x14, 0x4f, 0x99, 0xdd, 0x04, 0x70, 0x28, 0x25, 0xde, 0xbb,
	0x98, 0xe2, 0xa8, 0xa5, 0xb6, 0x2b, 0x1d, 0xbd, 0x7b, 0x3d, 0x71, 0x71, 0xbd, 0x70, 0x72, 0xfd,
	0x59, 0xaa, 0xb6, 0xe5, 0x53, 0x32, 0xb1, 0x73, 0xe7, 0xd0, 0x1d, 0xd0, 0x70, 0x78, 0x84, 0x47,
	0x98, 0x38, 0xc3, 0x56, 0xa5, 0xad, 0x74, 0xf4, 0xee, 0x79, 0x61, 0x64, 0x4b, 0xca, 0xb9, 0x15,
	0x3b, 0xd3, 0x63, 0x11, 0x8d, 0x30, 0x75, 0x5a, 0x0b, 0x6d, 0xa5, 0x63, 0xd8, 0x7c, 0x8d, 0x5a,
	0x50, 0xa3, 0x8e, 0xe7, 0x53, 0xec, 0xb6, 0xaa, 0x6d, 0xa5, 0x53, 0xb7, 0xe5, 0xd6, 0x7c, 0x0c,
	0x2b, 0x25, 0x0f, 0x50, 0x03, 0x2a, 0xef, 0xf1, 0x44, 0x04, 0xc3, 0x96, 0x68, 0x15, 0xaa, 0xc7,
	0xce, 0x30, 0x4e, 0xb2, 0x64, 0xd8, 0xc9, 0xe6, 0xa1, 0x7a, 0x5f, 0xb1, 0xfe, 0x50, 0x60, 0xb9,
	0xe8, 0x4a, 0x9a, 0x51, 0x25, 0x97, 0xd1, 0xa7, 0xa0, 0xf5, 0x03, 0xdf, 0xef, 0x79, 0xfe, 0x20,
	0x10, 0xd9, 0xb8, 0x36, 0x33, 0x90, 0xf5, 0x8d, 0xc0, 0xf7, 0x59, 0xa1, 0x92, 0x64, 0xd4, 0xfb,
	0x62, 0x6b, 0x3e, 0x82, 0xa5, 0xc2, 0xa7, 0x93, 0xbc, 0xd4, 0xf2, 0x5e, 0xfe, 0xa4, 0x42, 0xc3,
	0xc6, 0x51, 0x10, 0x93, 0x3e, 0x66, 0xd1, 0x6e, 0x7a, 0x83, 0x01, 0x33, 0x10, 0x0c, 0x65, 0xcd,
	0xd8, 0x92, 0x49, 0x7c, 0x3c, 0x16, 0xc7, 0xd9, 0x12, 0x5d, 0x05, 0xc3, 0xc7, 0xe3, 0x5e, 0x3f,
	0x18, 0x85, 0x31, 0x4b, 0x5e, 0x85, 0x27, 0x4f, 0xf7, 0xf1, 0x78, 0x43, 0x88, 0x18, 0x58, 0x98,
	0x0a, 0xc1, 0xa3, 0xe0, 0x18, 0xbb, 0x3c, 0xeb, 0x75, 0x1b, 0x7c, 0x3c, 0xb6, 0x13, 0x09, 0xba,
	0x04, 0x1a, 0x53, 0xc0, 0x3f, 0x52, 0xe2, 0xf0, 0xec, 0x1b, 0x76, 0xdd, 0xc7, 0xe3, 0x2d, 0xb6,
	0x67, 0x17, 0x10, 0xfc, 0x21, 0xf6, 0x08, 0x8e, 0x7a, 0xec, 0xee, 0xc5, 0xe4, 0x02, 0x29, 0xdb,
	0xc1, 0x63, 0x74, 0x19, 0xb4, 0x08, 0xfb, 0x91, 0x47, 0xbd, 0x63, 0xdc, 0xaa, 0xf1, 0xef, 0x99,
	0x00, 0xdd, 0x10, 0xd9, 0xae, 0xb7, 0x95, 0xce, 0x72, 0xb7, 0x29, 0x92, 0xca, 0x02, 0x64, 0x81,
	0xee, 0x4f, 0x42, 0x9c, 0x94, 0xc0, 0xfa, 0x4b, 0xcd, 0x3a, 0x81, 0xc7, 0xbf, 0x51, 0x80, 0xa8,
	0x52, 0x28, 0x4a, 0x5e, 0xf1, 0x93, 0x08, 0x6d, 0x41, 0xcd, 0xc5, 0x11, 0x25, 0xc1, 0x84, 0xa7,
	0xad, 0x6e, 0xcb, 0x2d, 0xba, 0x01, 0x2b, 0x62, 0xd9, 0x73, 0x71, 0x18, 0x44, 0x69, 0xf6, 0x96,
	0x85, 0x78, 0x33, 0x91, 0xe6, 0x15, 0x25, 0x46, 0x17, 0x0a, 0x8a, 0xfb, 0x89, 0x34, 0x05, 0x76,
	0x35, 0x03, 0xb6, 0xf9, 0xe6, 0x34, 0xf0, 0xbd, 0x95, 0x07, 0x86, 0xde, 0x5d, 0x13, 0x41, 0x96,
	0x11, 0x91, 0x47, 0xcc, 0x2f, 0x0a, 0x18, 0xcf, 0xc2, 0x70, 0x38, 0xb1, 0xf1, 0x87, 0x18, 0x47,
	0x94, 0xe5, 0x99, 0x83, 0x57, 0xe1, 0x26, 0x9a, 0xa5, 0x3c, 0x31, 0x58, 0xda, 0x5c, 0x01, 0xdd,
	0x84, 0x6a, 0xc4, 0x90, 0x2c, 0x2e, 0x5b, 0x9d, 0xd5, 0xf4, 0x76, 0xa2, 0xc2, 0x8c, 0xba, 0xde,
	0x60, 0x20, 0x5a, 0xbb, 0x39, 0x23, 0xf9, 0x36, 0x57, 0xb0, 0x1e, 0xc1, 0x92, 0xf0, 0x26, 0x0a,
	0x03, 0x3f, 0xc2, 0xd9, 0x2d, 0xca, 0x89, 0xb7, 0x58, 0xbf, 0xa9, 0xb0, 0x2c, 0x63, 0xdd, 0x08,
	0xfc, 0x81, 0x77, 0x88, 0xae, 0xc1, 0x92, 0xc4, 0x74, 0xef, 0x3d, 0x9e, 0x24, 0xe5, 0xd7, 0x6c,
	0x43, 0x0a, 0x5f, 0xe2, 0x49, 0x84, 0x6e, 0x43, 0x85, 0x38, 0x63, 0xd1, 0xae, 0x57, 0x4a, 0x49,
	0x4b, 0x0c, 0xad, 0xdb, 0xce, 0x38, 0x01, 0x05, 0x53, 0x45, 0x0f, 0x60, 0xb1, 0xcf, 0xe5, 0x9c,
	0x33, 0xf5, 0xee, 0xd5, 0xd9, 0x87, 0x92, 0x9f, 0xe4, 0x9c, 0x38, 0x60, 0xde, 0x85, 0xba, 0xb4,
	0x35, 0x0f, 0x01, 0x99, 0x0f, 0x40, 0xcf, 0x99, 0x9b, 0x8b, 0xbb, 0x6c, 0x68, 0x24, 0x47, 0x63,
	0x82, 0x65, 0x99, 0x9f, 0xc0, 0x0a, 0x11, 0xce, 0xf6, 0x44, 0x28, 0x4a, 0x81, 0x77, 0x8b, 0xa1,
	0xd8, 0xcb, 0xa4, 0xb0, 0xb7, 0xee, 0x43, 0x73, 0xd3, 0xa1, 0xce, 0x1e, 0x97, 0x45, 0x69, 0xb9,
	0xae, 0x82, 0xe1, 0x3a, 0xd4, 0xe9, 0x25, 0xba, 0x32, 0xdd, 0xba, 0x9b, 0xa9, 0x5a, 0xbf, 0x2a,
	0xa0, 0xf3, 0x8a, 0x7f, 0x4e, 0xc0, 0xdd, 0xca, 0x15, 0xe8, 0x13, 0x51, 0x09, 0x25, 0xeb, 0x1e,
	0x18, 0x89, 0x4b, 0x22, 0x0c, 0x89, 0x57, 0xe5, 0x24, 0xbc, 0xbe, 0x85, 0xc6, 0x0b, 0x4c, 0xf7,
	0xfa, 0x47, 0x78, 0xe4, 0xc8, 0x80, 0xbe, 0x80, 0x34, 0x59, 0x3d, 0xc6, 0x48, 0x32, 0x0b, 0x4b,
	0x52, 0xca, 0xc8, 0x2a, 0x9a, 0x4a, 0x95, 0x3a, 0x9d, 0xaa, 0x2f, 0xe1, 0x5c, 0xce, 0xba, 0xf0,
	0xed, 0x02, 0x2c, 0x46, 0x5c, 0xc2, 0xbd, 0x33, 0x6c, 0xb1, 0xb3, 0x5e, 0x01, 0xda, 0x1e, 0x85,
	0x01, 0xa1, 0x49, 0x22, 0x84, 0x33, 0xe5, 0x79, 0x2d, 0xb3, 0xad, 0x9e, 0x90, 0x6d, 0xeb, 0x19,
	0x34, 0x0b, 0xe6, 0xa6, 0xfb, 0xb1, 0x72, 0x52, 0x3f, 0x52, 0x46, 0xc4, 0x61, 0x4c, 0x3f, 0xe6,
	0xcb, 0x0c, 0x0c, 0xaa, 0x73, 0x60, 0x90, 0x21, 0x9e, 0xe0, 0x70, 0x38, 0xe1, 0x35, 0xd6, 0xec,
	0x64, 0x63, 0xfd, 0xad, 0xb0, 0x37, 0x0b, 0xbf, 0x56, 0xf8, 0x5c, 0xbe, 0x77, 0x15, 0xaa, 0x1f,
	0x62, 0x4c, 0x26, 0x72, 0x7e, 0xf2, 0x0d, 0x6a, 0x83, 0xee, 0xe2, 0xa8, 0x4f, 0xbc, 0x90, 0x7a,
	0x81, 0x2f, 0x6c, 0xe6, 0x45, 0xc9, 0x0c, 0x18, 0x38, 0xf1, 0x90, 0x72, 0xe2, 0xd6, 0x6c, 0xb9,
	0x9d, 0x15, 0x49, 0x75, 0x9e, 0x6e, 0x3a, 0x82, 0x55, 0x1b, 0x3b, 0x2e, 0xeb, 0xa8, 0xb3, 0x91,
	0xb1, 0x04, 0xac, 0x7a, 0x12, 0x60, 0x37, 0xe0, 0x7c, 0xe9, 0xa6, 0x33, 0x10, 0xed, 0x08, 0x9a,
	0xd2, 0xc8, 0x99, 0x3a, 0x39, 0xeb, 0x4e, 0xf5, 0x34, 0xdd, 0xf9, 0x4d, 0x96, 0x9d, 0xb3, 0x75,
	0x29, 0x66, 0x73, 0x61, 0x40, 0x70, 0x74, 0xf4, 0x39, 0x49, 0xc7, 0x7a, 0x0c, 0x2b, 0xe9, 0x35,
	0x67, 0xc8, 0xea, 0xb7, 0x60, 0xd8, 0x39, 0x86, 0x60, 0xcf, 0x00, 0xdf, 0x19, 0xa5, 0xef, 0x4b,
	0xb6, 0x46, 0x57, 0x00, 0x3c, 0xde, 0x95, 0xce, 0xbb, 0x21, 0x16, 0x2f, 0x91, 0x9c, 0xc4, 0x7a,
	0x0e, 0xe7, 0xa4, 0x8d, 0x8c, 0x94, 0xbf, 0x06, 0x4d, 0xe2, 0x4d, 0xbe, 0x7f, 0x9a, 0xa5, 0x8c,
	0xf3, 0xf7, 0x53, 0xa6, 0x65, 0x3d, 0x85, 0x95, 0x37, 0xce, 0xd0, 0x73, 0x73, 0x4c, 0x92, 0x15,
	0x4d, 0x39, 0x4d, 0xd1, 0x9e, 0x43, 0x23, 0xb3, 0x20, 0x1c, 0x31, 0xa1, 0x3e, 0x76, 0x88, 0xef,
	0xf9, 0x87, 0x92, 0x13, 0xd3, 0x3d, 0xa3, 0x35, 0x4c, 0x48, 0x40, 0x24, 0x11, 0x8a, 0x9d, 0xf5,
	0x03, 0x5c, 0x94, 0x76, 0xb2, 0x81, 0x23, 0x7d, 0x9a, 0xf5, 0x04, 0x9f, 0x13, 0x5c, 0x6f, 0x61,
	0x2d, 0xe7, 0xe7, 0x7f, 0x6d, 0x9d, 0xc2, 0xda, 0x6b, 0x12, 0x1c, 0x7b, 0x91, 0x17, 0xf8, 0x98,
	0x14, 0x7a, 0x7b, 0x0e, 0x68, 0xcc, 0x7b, 0xeb, 0x75, 0xa8, 0x1f, 0x6c, 0xef, 0xc6, 0x34, 0x8c,
	0x29, 0x23, 0xad, 0x57, 0x38, 0x8a, 0x9c, 0x43, 0x19, 0x87, 0xdc, 0xde, 0xec, 0x26, 0x43, 0x4f,
	0x3e, 0x9f, 0x91, 0x0e, 0xb5, 0x83, 0x9d, 0x97, 0x3b, 0xbb, 0xdf, 0xef, 0x34, 0xfe, 0x87, 0x34,
	0xa8, 0x6e, 0xef, 0xbc, 0x3e, 0xd8, 0x6f, 0x28, 0x08, 0x60, 0x71, 0xf7, 0x60, 0x9f, 0xad, 0xd5,
	0xee, 0xef, 0x35, 0xa8, 0xf3, 0x80, 0x5c, 0x4c, 0x50, 0x17, 0xaa, 0x3c, 0x22, 0x24, 0xd1, 0x94,
	0x8f, 0xcf, 0x5c, 0x2d, 0x0a, 0x05, 0x04, 0xba, 0xa0, 0xa5, 0x6f, 0x11, 0x24, 0x1f, 0xa8, 0xe5,
	0xd7, 0x89, 0x69, 0xc8, 0xff, 0x4c, 0xec, 0xaf, 0x2d, 0xba, 0x07, 0x7a, 0xee, 0xad, 0x81, 0x0a,
	0x1f, 0x4d, 0x53, 0xfe, 0x13, 0x98, 0xf1, 0x1a, 0xf9, 0x0a, 0x16, 0xf8, 0x3f, 0x00, 0x94, 0xfb,
	0xb7, 0x20, 0xaf, 0x68, 0x16, 0x64, 0xe2, 0xc0, 0x13, 0xd0, 0xd2, 0x81, 0x9b, 0x7a, 0x57, 0x1e,
	0xf0, 0x66, 0x6b, 0xfa, 0x83, 0x38, 0xbf, 0x09, 0x7a, 0x6e, 0x68, 0xa2, 0x8b, 0xb2, 0xa6, 0x53,
	0x73, 0x39, 0x75, 0x7b, 0xd6, 0x8c, 0xbd, 0x0b, 0x55, 0x3e, 0xc0, 0x50, 0xc6, 0x4b, 0xd9, 0x14,
	0x35, 0x57, 0x8b, 0xc2, 0xe4, 0x4c, 0x47, 0xb9, 0xad, 0xa0, 0xef, 0x60, 0xa9, 0xc0, 0xed, 0xe8,
	0x52, 0x0a, 0x93, 0xe9, 0xd9, 0x62, 0x5e, 0x9e, 0xfd, 0x51, 0xf8, 0xf0, 0x82, 0x91, 0x51, 0xc6,
	0xb9, 0xc8, 0x2c, 0x69, 0xe7, 0x53, 0x79, 0x69, 0xe6, 0x37, 0x61, 0xe8, 0x3e, 0xd4, 0x04, 0x29,
	0xa2, 0x0c, 0xb5, 0x79, 0x2e, 0x36, 0x2f, 0x94, 0xc5, 0xe2, 0xe4, 0x1d, 0xd0, 0x52, 0x2e, 0x2b,
	0x15, 0xbd, 0x55, 0xc2, 0x7f, 0x56, 0x72, 0x0b, 0x16, 0xf6, 0x68, 0x10, 0x96, 0xf4, 0x8b, 0x78,
	0x7a, 0x04, 0x75, 0xd9, 0xf2, 0x48, 0x5e, 0x5e, 0x62, 0x3b, 0x73, 0x6d, 0x4a, 0x2e, 0x2e, 0xd8,
	0x05, 0x34, 0xcd, 0x47, 0xa8, 0x5d, 0x52, 0x9f, 0xa2, 0xaa, 0x8f, 0x1b, 0x7c, 0x59, 0x20, 0xca,
	0xc4, 0xdc, 0x95, 0x69, 0xe5, 0x53, 0x19, 0xeb, 0xfe, 0xa9, 0x80, 0x9e, 0x23, 0x9c, 0x7f, 0x17,
	0xea, 0x43, 0xd9, 0xdf, 0xd2, 0x9d, 0x8f, 0x50, 0x99, 0xb9, 0x22, 0xbe, 0x4b, 0xd2, 0xb9, 0xad,
	0x9c, 0xa6, 0x0e, 0xef, 0x16, 0xf9, 0xe6, 0xce, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x90, 0xb9,
	0x9c, 0xd2, 0xd9, 0x12, 0x00, 0x00,
}
